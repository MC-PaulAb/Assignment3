package application;
/**
 * This is a utility class that encrypts and decrypts a phrase using two
 * different approaches. The first approach is called the Caesar Cipher and is a
 * simple “substitution cipher” where characters in a message are replaced by a
 * substitute character. The second approach, due to Giovan Battista Bellaso,
 * uses a key word, where each character in the word specifies the offset for
 * the corresponding character in the message, with the key word wrapping around
 * as needed.
 * 
 * @author Farnaz Eivazi
 * @version 7/16/2022
 */

/**
 *Class: CMSC203 CRN 21575
 *Program: Assignment 3 Design
 *Instructor:Gregory Grinberg
 *Summary of Description: (Give a brief description for a Program): A code creates a GUI which allows the user to encrypt the code with either a Caesar or a Bellaso Cipher.
 *Due Date:10/09/2023
 *Integrity Pledge: I pledge that I have completed the programming assignment independently.
 *I have not copied the code from a student or any source.
 *Student: Paul Abili  
 */
public class CryptoManager {
	
	private static final char LOWER_RANGE = ' ';
	private static final char UPPER_RANGE = '_';
	private static final int RANGE = UPPER_RANGE - LOWER_RANGE + 1;

	/**
	 * This method determines if a string is within the allowable bounds of ASCII codes 
	 * according to the LOWER_RANGE and UPPER_RANGE characters
	 * @param plainText a string to be encrypted, if it is within the allowable bounds
	 * @return true if all characters are within the allowable bounds, false if any character is outside
	 */
	// possible issue
	public static boolean isStringInBounds (String plainText) {
		for(int i = 0; i < plainText.length(); i++) {
			if(plainText.charAt(i) < LOWER_RANGE || plainText.charAt(i) > UPPER_RANGE) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Encrypts a string according to the Caesar Cipher.  The integer key specifies an offset
	 * and each character in plainText is replaced by the character \"offset\" away from it 
	 * @param plainText an uppercase string to be encrypted.
	 * @param key an integer that specifies the offset of each character
	 * @return the encrypted string
	 */
	public static String caesarEncryption(String plainText, int key) {
		String encryptedCode = "";
		if(isStringInBounds(plainText)){
			for(int i = 0; i < plainText.length(); i++) {
				if((char)(plainText.charAt(i) + key) > 95) {
					encryptedCode += (char)(plainText.charAt(i) + (key - 64));
				} else { 
					encryptedCode += (char)(plainText.charAt(i) + key);
				}
			}
			return encryptedCode;
		} else {
			return "The selected string is not in bounds, Try Again";
		}
		
	}
	
	/**
	 * Encrypts a string according the Bellaso Cipher.  Each character in plainText is offset 
	 * according to the ASCII value of the corresponding character in bellasoStr, which is repeated
	 * to correspond to the length of plainText
	 * @param plainText an uppercase string to be encrypted.
	 * @param bellasoStr an uppercase string that specifies the offsets, character by character.
	 * @return the encrypted string
	 */
	public static String bellasoEncryption (String plainText, String bellasoStr) {
		String encryptedCode = ""; 
		String cipherKey = "";
		int result = 0;
		if(isStringInBounds(plainText)) {
			int wholeDifference = plainText.length() / bellasoStr.length();
			int difference = plainText.length() % bellasoStr.length();
			for(int i = 0; i < wholeDifference; i++) {
				cipherKey += bellasoStr;
			}
			cipherKey +=bellasoStr.substring(0,difference);
			for(int i = 0; i < plainText.length(); i++) {
				result = (char)plainText.charAt(i) + (char)cipherKey.charAt(i);
				result-=64;
				while(result > 95) {
					result-=64;
				}
				encryptedCode += (char)result;
			}
		} 

		return encryptedCode;
	}
	
	/**
	 * Decrypts a string according to the Caesar Cipher.  The integer key specifies an offset
	 * and each character in encryptedText is replaced by the character \"offset\" characters before it.
	 * This is the inverse of the encryptCaesar method.
	 * @param encryptedText an encrypted string to be decrypted.
	 * @param key an integer that specifies the offset of each character
	 * @return the plain text string
	 */
	public static String caesarDecryption (String encryptedText, int key) {
		String plainText = "";
		for(int i = 0; i < encryptedText.length(); i++){
			if((char)(encryptedText.charAt(i) - key) < 32) {
				plainText += (char)(encryptedText.charAt(i) + (64 - key)); 
			} else {
				plainText += (char)(encryptedText.charAt(i) - key);
			}
		}
		return plainText;
	}
	
	/**
	 * Decrypts a string according the Bellaso Cipher.  Each character in encryptedText is replaced by
	 * the character corresponding to the character in bellasoStr, which is repeated
	 * to correspond to the length of plainText.  This is the inverse of the encryptBellaso method.
	 * @param encryptedText an uppercase string to be encrypted.
	 * @param bellasoStr an uppercase string that specifies the offsets, character by character.
	 * @return the decrypted string
	 */
	public static String bellasoDecryption(String encryptedText, String bellasoStr) {
		String plainText = "";
		String cipherKey = "";
		int result = 0;
		int wholeDifference = (char)encryptedText.length() / (char)bellasoStr.length();
		int difference = (char)encryptedText.length() % (char)bellasoStr.length();
		for(int i = 0; i < wholeDifference; i++) {
			cipherKey += bellasoStr;
		}
		cipherKey+=bellasoStr.substring(0,difference);
		for(int i = 0; i < encryptedText.length(); i++) {
			result = (char)encryptedText.charAt(i) - (char)cipherKey.charAt(i);
			result += 64;
			while(result < 32) {
				result+=64;
			}
			plainText += (char)result;
		}
		return plainText;
	}
}
